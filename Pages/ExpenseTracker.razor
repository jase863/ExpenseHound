@page "/expense-tracker"
@inject ExpenseHound.Services.ExpenseService ExpenseService
@using ExpenseHound.Models

<!-- Error flag -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<h3>Expense Tracker</h3>

<EditForm Model="newExpense" OnValidSubmit="AddExpense" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-6">
        <!-- Expense Type -->
        <div class="col-md">
            <div class="form-floating">
                <select class="form-select" id="floatingSelect" @bind="newExpense.ExpenseType">
                    <option selected>Choose an Expense Type...</option>
                    <option value="OneTime">One Time</option>
                    <option value="Recurring">Recurring</option>
                    <option value="Fixed">Fixed</option>
                    <option value="Variable">Variable</option>
                </select>
                <label for="floatingSelect">Expense Type</label>
                <!-- Validation Message -->
                <ValidationMessage For="@(() => newExpense.ExpenseType)" />
            </div>
        </div>

        <!-- Expense Name / Description -->
        <div class="col-md">
            <div class="form-floating">
                <input type="text" class="form-control" id="floatingInputGrid" @bind="newExpense.Description" placeholder="Enter a Description" />
                <label for="floatingInputGrid">Description</label>
                <!-- Validation Message for description -->
                <ValidationMessage For="@(() => newExpense.Description)" />
            </div>
        </div>

        <!-- Expense Amount -->
        <div class="col-md">
            <div class="form-floating">
                <input type="number" class="form-control" id="floatingInputGrid" @bind="newExpense.Amount" placeholder="$50.00" />
                <label for="floatingInputGrid">Amount</label>
                <!-- Validation Message for amount -->
                <ValidationMessage For="@(() => newExpense.Amount)" />
            </div>
        </div>

        <!-- Expense Category -->
        <div class="col-md">
            <div class="form-floating">
                <select class="form-select" id="floatingSelect" @bind="newExpense.Category">
                    <option selected>Choose a Category...</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Utilities">Utilities</option>
                    <option value="Rent">Rent</option>
                    <option value="Other">Other</option>
                </select>
                <label for="floatingSelect">Category</label>
                <!-- Validation Message for Category -->
                <ValidationMessage For="@(() => newExpense.Category)" />
            </div>
        </div>

        <!-- Expense Date -->
        <div class="col-md">
            <div class="form-floating">
                <input type="date" class="form-control" id="floatingSelect" @bind="newExpense.Date" />
                <label for="floatingSelect">Date</label>
                <!-- Validation Message for Date -->
                <ValidationMessage For="@(() => newExpense.Date)" />
            </div>
        </div>

        <!-- Expense Button -->
        <div class="col-md">
            <div class="form-floating">
                <button class="form-control btn btn-primary" type="submit">Add Expense</button>
            </div>
        </div>
    </div>
</EditForm>



<h4>Expenses</h4>
<table class="table table-striped table-dark">
    <thead class="thead-dark">
        <tr>
            <th scope="col">Expense Type</th>
            <th scope="col">Description</th>
            <th scope="col">Amount</th>
            <th scope="col">Date</th>
            <th scope="col">Category</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expense in ExpenseService.GetExpenses())
        {
            <tr>
                <td scope="row">@expense.ExpenseType</td>
                <td>@expense.Description</td>
                <td>$@expense.Amount</td>
                <td>@expense.Date.ToShortDateString()</td>
                <td>@expense.Category</td>
            </tr>
        }
    </tbody>
</table>

<h4>Total Expenses:</h4><span> $@ExpenseService.GetTotal()</span>

@code {
    private string errorMessage;
    private bool descriptionError;

    /// <summary>
    /// Initializes a new expense with the current date.
    /// </summary>
    private Expense newExpense = new Expense
        {
            Description = "Enter a Description",
            Date = DateTime.Now
        };


    /// <summary>
    /// Adds an Expense to the Expense List
    /// </summary>
    private void AddExpense()
    {

        //Handle expense type
        if (newExpense.ExpenseType == "Choose an Expense Type...")
        {
            errorMessage = "Please select an Expense Type.";
            return;
        }
        //Handle Description error.
        if (newExpense.Description == "Enter a Description")
        {
            descriptionError = true;
            return;
        }
        //Handle amount error.
        if (newExpense.Amount == 0)
        {
            errorMessage = "Please enter an amount.";
            return;
        }
        //Handle Category error.
        if (newExpense.Category == "Choose a Category...")
        {
            errorMessage = "Please select a Category.";
            return;
        }

        //Reset error messages
        errorMessage = null;
        descriptionError = false;

        //Add the expense to the service
        ExpenseService.AddExpense(new Expense
            {
                ExpenseType = newExpense.ExpenseType,
                Description = newExpense.Description,
                Amount = newExpense.Amount,
                Category = newExpense.Category,
                Date = newExpense.Date
            });

        //Reset form
        newExpense = new Expense { Description = "Enter a Description", Date = DateTime.Now };
    }

    /// <summary>
    /// Handles an invalid submit
    /// </summary>
    private void HandleInvalidSubmit()
    {
        errorMessage = "Please correct the errors and try again.";
    }
}
